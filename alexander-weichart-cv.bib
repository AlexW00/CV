@misc{RatisbonaCoding,
  title = {Ratisbona {{Coding}} e.{{V}}.},
  urldate = {2023-03-21},
  howpublished = {https://ratisbona-coding.org/},
  file = {/home/aw/Zotero/storage/URXA9ZMV/ratisbona-coding.org.html}
}

@inproceedings{schmidScreenshotMatcherTakingSmartphone2021,
  title = {{{ScreenshotMatcher}}: {{Taking Smartphone Photos}} to {{Capture Screenshots}}},
  shorttitle = {{{ScreenshotMatcher}}},
  booktitle = {Proceedings of {{Mensch}} Und {{Computer}} 2021},
  author = {Schmid, Andreas and Fischer, Thomas and Weichart, Alexander and Hartmann, Alexander and Wimmer, Raphael},
  year = {2021},
  month = sep,
  series = {{{MuC}} '21},
  pages = {44--48},
  publisher = {{Association for Computing Machinery}},
  address = {{New York, NY, USA}},
  doi = {10.1145/3473856.3474014},
  urldate = {2023-03-22},
  abstract = {Taking screenshots is a common way of capturing screen content to share it with others or save it for later. Even though all major desktop operating systems come with a screenshot function, a lot of people also use smartphone cameras to photograph screen contents instead. While users see this method as faster and more convenient, image quality is significantly lower. With ScreenshotMatcher, we present a system that allows for capturing a high-fidelity screenshot by taking a smartphone photo of (part of) the screen. A smartphone application sends a photo of the screen region of interest to a program running on the PC which retrieves the matching screen region and sends it back to the smartphone. Comparing four feature matching algorithms and multiple parameters, we identified a combination of ORB keypoint detection (feature limit 2000) and a brute force feature matcher using Hamming distance as the best solution for this task (success rate: 85\%, processing time: 90 ms). This raw performance results in a real-world success rate of 47\% and a mean response time per screenshot of 878 ms as measured in a remote user study (N=19). Released as open-source code, ScreenshotMatcher may be used as a basis for applications and research prototypes that bridge the gap between PC and smartphone.},
  isbn = {978-1-4503-8645-6},
  keywords = {computer vision,cross device interaction,mobile}
}

@misc{weichartAlexW00Obsidiannotelinker2023,
  title = {{{AlexW00}}/Obsidian-Note-Linker},
  author = {Weichart, Alexander},
  year = {2023},
  month = mar,
  urldate = {2023-03-21},
  abstract = {üîó Automatically link your Obsidian notes.},
  copyright = {MIT},
  howpublished = {https://github.com/AlexW00/obsidian-note-linker},
  keywords = {obsidian,obsidian-md,obsidian-notes,obsidian-plugin,obsidian-vault,obsidianmd,react,regex,regular-expression,rule-based,rust,typescript,wasm}
}

@misc{weichartFlowGraphAlpha2023,
  title = {{{FlowGraph}} - Alpha},
  author = {Weichart, Alexander},
  year = {2023},
  month = mar,
  urldate = {2023-03-21},
  abstract = {\ding{225}Ô∏è A tool for visualizing relationships between concepts},
  howpublished = {https://github.com/AlexW00/Flow\_Graph},
  keywords = {digital-garden,digitalgarden,graph,knowledge-graph,knowledge-management,learning,visualization}
}

@misc{weichartProjects,
  title = {Projects},
  author = {Weichart, Alexander},
  urldate = {2023-03-23},
  howpublished = {https://www.linkedin.com/in/alexander-weichart-a357241a4/details/projects/},
  file = {/home/aw/Zotero/storage/DGX2H7JU/projects.html}
}

@misc{weichartTinyCompTS2023,
  title = {{{TinyCompTS}}},
  author = {Weichart, Alexander},
  year = {2023},
  month = mar,
  urldate = {2023-03-21},
  abstract = {ü§ñ A tiny JS/TS compiler written in vanilla TS.},
  copyright = {MIT},
  howpublished = {https://github.com/AlexW00/TinyCompTS}
}
